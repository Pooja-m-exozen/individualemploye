"use client";

import React, { useEffect, useState } from "react";
import { FaUsers, FaProjectDiagram, FaFileAlt, FaChartBar } from "react-icons/fa";
import { useTheme } from "@/context/ThemeContext";

// Add type for summary and attendance trend

type SummaryItem = {
  label: string;
  value: number | string | null;
  icon: React.ReactNode;
};

type AttendanceTrendItem = {
  date: string;
  total: number;
  present: number;
  absent: number;
  presentBreakdown: Record<string, unknown>;
  absentBreakdown: Record<string, unknown>;
};

type LeaveTrendItem = {
  _id: string;
  count: number;
};

type ProjectDistributionItem = {
  _id: string;
  count: number;
};

type RecentAttendanceItem = {
  _id: string;
  employeeId: string;
  projectName: string;
  designation: string;
  date: string;
  punchInTime: string;
  punchInPhoto: string;
  punchInLatitude: number;
  punchInLongitude: number;
  status: string;
  attendanceType: string;
  isAutoGenerated: boolean;
  isRegularized: boolean;
  regularizationStatus: string | null;
  timestamp: string;
  createdAt: string;
  updatedAt: string;
};

type RecentLeaveItem = {
  _id: string;
  employeeId: string;
  leaveType: string;
  startDate: string;
  endDate: string;
  numberOfDays: number;
  isHalfDay: boolean;
  halfDayType: string | null;
  status: string;
  reason: string;
  emergencyContact: string;
  attachments: unknown[];
  createdAt: string;
  updatedAt: string;
  approvalDate?: string;
};

type RecentKYCItem = {
  _id: string;
  personalDetails: Record<string, unknown>;
};

// PIE CHART COLORS
const PIE_COLORS = [
  '#6366f1', '#60a5fa', '#34d399', '#fbbf24', '#f87171', '#a78bfa', '#f472b6', '#fb7185', '#facc15', '#4ade80', '#2dd4bf', '#38bdf8', '#818cf8', '#f59e42', '#eab308', '#84cc16', '#14b8a6', '#0ea5e9', '#a3e635', '#f43f5e'
];

export default function CoordinatorDashboardPage() {
  const { theme } = useTheme();

  // State for dashboard summary
  const [summary, setSummary] = useState<SummaryItem[]>([
    { label: "Total Employees", value: null, icon: <FaUsers className="w-7 h-7" /> },
    { label: "Active Projects", value: null, icon: <FaProjectDiagram className="w-7 h-7" /> },
    { label: "Pending KYC", value: null, icon: <FaFileAlt className="w-7 h-7" /> },
  ]);
  const [loading, setLoading] = useState(true);
  // Attendance trend state
  const [attendanceTrend, setAttendanceTrend] = useState<AttendanceTrendItem[]>([]);
  const [projectDistribution, setProjectDistribution] = useState<ProjectDistributionItem[]>([]);
  const [recentKYC, setRecentKYC] = useState<RecentKYCItem[]>([]);
  const [recentLoading, setRecentLoading] = useState(true);
  const [showLegend, setShowLegend] = useState(false);

  useEffect(() => {
    async function fetchDashboardData() {
      setLoading(true);
      try {
        const [empRes, projRes, kycRes] = await Promise.all([
          fetch("https://cafm.zenapi.co.in/api/dashboard/total-employees"),
          fetch("https://cafm.zenapi.co.in/api/dashboard/total-projects"),
          fetch("https://cafm.zenapi.co.in/api/dashboard/pending-kyc"),
        ]);
        const empData = await empRes.json();
        const projData = await projRes.json();
        const kycData = await kycRes.json();
        setSummary([
          { label: "Total Employees", value: empData.total, icon: <FaUsers className="w-7 h-7" /> },
          { label: "Active Projects", value: projData.total, icon: <FaProjectDiagram className="w-7 h-7" /> },
          { label: "Pending KYC", value: kycData.pending, icon: <FaFileAlt className="w-7 h-7" /> },
        ]);
      } catch {
        setSummary([
          { label: "Total Employees", value: null, icon: <FaUsers className="w-7 h-7" /> },
          { label: "Active Projects", value: null, icon: <FaProjectDiagram className="w-7 h-7" /> },
          { label: "Pending KYC", value: null, icon: <FaFileAlt className="w-7 h-7" /> },
        ]);
      }
      setLoading(false);
    }
    fetchDashboardData();
  }, []);

  useEffect(() => {
    async function fetchProjectDistribution() {
      try {
        const res = await fetch("https://cafm.zenapi.co.in/api/dashboard/project-distribution");
        const data = await res.json();
        setProjectDistribution((data.distribution || []) as ProjectDistributionItem[]);
      } catch {
        setProjectDistribution([] as ProjectDistributionItem[]);
      }
    }
    fetchProjectDistribution();
  }, []);

  // Fetch recent activities
  useEffect(() => {
    async function fetchRecentActivities() {
      setRecentLoading(true);
      try {
        const res = await fetch("https://cafm.zenapi.co.in/api/dashboard/recent-activities");
        const data = await res.json();
        setRecentKYC((data.recentKYC || []) as RecentKYCItem[]);
      } catch {
        setRecentKYC([] as RecentKYCItem[]);
      }
      setRecentLoading(false);
    }
    fetchRecentActivities();
  }, []);

  // Pie chart calculations
  const totalProjects = projectDistribution.reduce((sum, p) => sum + p.count, 0);

  return (
    <div>
      {/* Header */}
      <div
        className={`rounded-2xl mb-8 p-6 flex items-center gap-5 shadow-lg bg-gradient-to-r ${
          theme === "dark"
            ? "from-blue-900 to-blue-700"
            : "from-blue-500 to-blue-800"
        }`}
      >
        <div
          className={`rounded-xl p-4 flex items-center justify-center ${
            theme === "dark" ? "bg-blue-900 bg-opacity-40" : "bg-blue-600 bg-opacity-30"
          }`}
        >
          <FaChartBar className="w-10 h-10 text-white" />
        </div>
        <div>
          <h1 className="text-3xl font-bold text-white mb-1">Coordinator Dashboard</h1>
          <p className="text-white text-base opacity-90">Overview of employees, projects, and activities.</p>
        </div>
      </div>
      {/* Summary Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 mb-8">
        {summary.map((item) => (
          <div
            key={item.label}
            className={`rounded-2xl shadow p-6 flex items-center gap-4 border ${
              theme === "dark"
                ? "bg-gray-800 border-blue-900"
                : "bg-white border-blue-100"
            }`}
          >
            <div
              className={`rounded-xl p-3 flex items-center justify-center ${
                theme === "dark" ? "bg-blue-900" : "bg-blue-100"
              }`}
            >
              {/* Render icon with blue color in light theme, white in dark theme */}
              {item.label === "Total Employees" && <FaUsers className="w-7 h-7" color={theme === "dark" ? "#fff" : "#2563eb"} />}
              {item.label === "Active Projects" && <FaProjectDiagram className="w-7 h-7" color={theme === "dark" ? "#fff" : "#2563eb"} />}
              {item.label === "Pending KYC" && <FaFileAlt className="w-7 h-7" color={theme === "dark" ? "#fff" : "#2563eb"} />}
            </div>
            <div>
              <div className={`text-2xl font-bold ${theme === "dark" ? "text-blue-300" : "text-blue-700"}`}>
                {loading || item.value === null ? <span className="animate-pulse">...</span> : item.value}
              </div>
              <div className={`text-sm font-medium ${theme === "dark" ? "text-gray-300" : "text-gray-500"}`}>{item.label}</div>
            </div>
          </div>
        ))}
      </div>
      {/* Graphs + Recent Activities */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
        {/* Project Distribution Pie Chart */}
        <div
          className={`rounded-2xl shadow p-6 border flex flex-col items-center ${
            theme === "dark" ? "bg-gray-800 border-blue-900" : "bg-white border-blue-100"
          }`}
          onMouseEnter={() => setShowLegend(true)}
          onMouseLeave={() => setShowLegend(false)}
        >
          <div className={`font-bold mb-4 ${theme === "dark" ? "text-blue-300" : "text-blue-700"}`}>Project Distribution</div>
          <svg width={220} height={220} viewBox="0 0 220 220" className="mb-4">
            {(() => {
              const r = 90;
              let acc = 0;
              return projectDistribution.map((p, i) => {
                const start = acc;
                const angle = (p.count / totalProjects) * 360;
                acc += angle;
                const largeArc = angle > 180 ? 1 : 0;
                const x1 = 110 + r * Math.cos((Math.PI * (start - 90)) / 180);
                const y1 = 110 + r * Math.sin((Math.PI * (start - 90)) / 180);
                const x2 = 110 + r * Math.cos((Math.PI * (start + angle - 90)) / 180);
                const y2 = 110 + r * Math.sin((Math.PI * (start + angle - 90)) / 180);
                return (
                  <path
                    key={p._id}
                    d={`M110,110 L${x1},${y1} A${r},${r} 0 ${largeArc} 1 ${x2},${y2} Z`}
                    fill={PIE_COLORS[i % PIE_COLORS.length]}
                    stroke="#fff"
                    strokeWidth={2}
                  />
                );
              });
            })()}
          </svg>
          {showLegend && (
            <div className="flex flex-wrap gap-2 justify-center">
              {projectDistribution.map((p, i) => (
                <span key={p._id} className="flex items-center gap-2 text-sm">
                  <span className="w-3 h-3 rounded-full" style={{ background: PIE_COLORS[i % PIE_COLORS.length] }}></span>
                  <span className={theme === "dark" ? "text-gray-200" : "text-gray-700"}>{p._id}</span>
                  <span className={theme === "dark" ? "text-gray-400" : "text-gray-500"}>({p.count})</span>
                </span>
              ))}
            </div>
          )}
        </div>
        {/* Recent Activities */}
        <div
          className={`rounded-2xl shadow p-6 border flex flex-col ${
            theme === "dark" ? "bg-gray-800 border-blue-900" : "bg-white border-blue-100"
          }`}
        >
          <div className={`font-bold mb-4 ${theme === "dark" ? "text-blue-300" : "text-blue-700"}`}>Recent Activities</div>
          <ul className="space-y-4">
            {recentLoading ? (
              <li className="text-center text-gray-400">Loading...</li>
            ) : (
              <>
                {recentKYC.slice(0, 5).map((kyc) => (
                  <li key={kyc._id} className="flex items-center gap-3">
                    <span className={`w-8 h-8 flex items-center justify-center rounded-full ${theme === "dark" ? "bg-yellow-900" : "bg-yellow-50"}`}>
                      <FaFileAlt className="text-yellow-500" />
                    </span>
                    <div className="flex-1">
                      <div className={theme === "dark" ? "text-gray-200 text-sm" : "text-gray-700 text-sm"}>
                        KYC update for <b>{
                          typeof kyc.personalDetails?.employeeId === 'string' || typeof kyc.personalDetails?.employeeId === 'number'
                            ? kyc.personalDetails.employeeId
                            : 'Unknown'
                        }</b>
                      </div>
                    </div>
                  </li>
                ))}
                {recentKYC.length === 0 && (
                  <li className="text-center text-gray-400">No recent KYC activities</li>
                )}
              </>
            )}
          </ul>
        </div>
      </div>
    </div>
  );
}

