"use client";

import React, { useEffect, useState } from "react";
import { FaUsers, FaProjectDiagram, FaFileAlt, FaCheckCircle, FaChartBar, FaBell } from "react-icons/fa";
import { useTheme } from "@/context/ThemeContext";

// Add type for summary and attendance trend

type SummaryItem = {
  label: string;
  value: number | string | null;
  icon: React.ReactNode;
};

type AttendanceTrendItem = {
  date: string;
  total: number;
  present: number;
  absent: number;
  presentBreakdown: Record<string, unknown>;
  absentBreakdown: Record<string, unknown>;
};

type LeaveTrendItem = {
  _id: string;
  count: number;
};

type ProjectDistributionItem = {
  _id: string;
  count: number;
};

type RecentAttendanceItem = {
  _id: string;
  employeeId: string;
  projectName: string;
  designation: string;
  date: string;
  punchInTime: string;
  punchInPhoto: string;
  punchInLatitude: number;
  punchInLongitude: number;
  status: string;
  attendanceType: string;
  isAutoGenerated: boolean;
  isRegularized: boolean;
  regularizationStatus: string | null;
  timestamp: string;
  createdAt: string;
  updatedAt: string;
};

type RecentLeaveItem = {
  _id: string;
  employeeId: string;
  leaveType: string;
  startDate: string;
  endDate: string;
  numberOfDays: number;
  isHalfDay: boolean;
  halfDayType: string | null;
  status: string;
  reason: string;
  emergencyContact: string;
  attachments: unknown[];
  createdAt: string;
  updatedAt: string;
  approvalDate?: string;
};

type RecentKYCItem = {
  _id: string;
  personalDetails: Record<string, unknown>;
};

type OnLeaveTodayItem = {
  _id: string;
  employeeId: string;
  name?: string;
  leaveType?: string;
  status?: string;
  date?: string;
};

type KycPersonalDetails = {
  employeeId: string;
  fullName: string;
};

type KycForm = {
  personalDetails: KycPersonalDetails;
};

type OnLeaveApiResponseItem = {
  _id: string;
  employeeId: string;
  leaveType: string;
  startDate: string;
  endDate: string;
  status: string;
};

// PIE CHART COLORS
const PIE_COLORS = [
  '#6366f1', '#60a5fa', '#34d399', '#fbbf24', '#f87171', '#a78bfa', '#f472b6', '#fb7185', '#facc15', '#4ade80', '#2dd4bf', '#38bdf8', '#818cf8', '#f59e42', '#eab308', '#84cc16', '#14b8a6', '#0ea5e9', '#a3e635', '#f43f5e'
];


export default function ManagerDashboardPage() {
  const { theme } = useTheme();

  // State for dashboard summary
  const [summary, setSummary] = useState<SummaryItem[]>([
    { label: "Total Employees", value: null, icon: <FaUsers className="w-7 h-7" /> },
    { label: "Active Projects", value: null, icon: <FaProjectDiagram className="w-7 h-7" /> },
    { label: "Pending KYC", value: null, icon: <FaFileAlt className="w-7 h-7" /> },
    { label: "Approved Leaves", value: null, icon: <FaCheckCircle className="w-7 h-7" /> },
  ]);
  const [loading, setLoading] = useState(true);
  // Attendance trend state
  const [attendanceTrend, setAttendanceTrend] = useState<AttendanceTrendItem[]>([]);
  const [attendanceLoading, setAttendanceLoading] = useState(true);
  const [leaveTrend, setLeaveTrend] = useState<LeaveTrendItem[]>([]);
  const [leaveLoading, setLeaveLoading] = useState(true);
  const [projectDistribution, setProjectDistribution] = useState<ProjectDistributionItem[]>([]);
  const [recentAttendance, setRecentAttendance] = useState<RecentAttendanceItem[]>([]);
  const [recentLeaves, setRecentLeaves] = useState<RecentLeaveItem[]>([]);
  const [recentKYC, setRecentKYC] = useState<RecentKYCItem[]>([]);
  const [recentLoading, setRecentLoading] = useState(true);
  const [showLegend, setShowLegend] = useState(false);
  const [onLeaveToday, setOnLeaveToday] = useState<OnLeaveTodayItem[]>([]);
  const [onLeaveTodayLoading, setOnLeaveTodayLoading] = useState(true);

  // Helper for responsive padding
  const sectionPad = "px-2 sm:px-4 md:px-0";

  useEffect(() => {
    async function fetchDashboardData() {
      setLoading(true);
      try {
        const [empRes, projRes, kycRes, leaveRes] = await Promise.all([
          fetch("https://cafm.zenapi.co.in/api/dashboard/total-employees"),
          fetch("https://cafm.zenapi.co.in/api/dashboard/total-projects"),
          fetch("https://cafm.zenapi.co.in/api/dashboard/pending-kyc"),
          fetch("https://cafm.zenapi.co.in/api/dashboard/approved-leaves"),
        ]);
        const empData = await empRes.json();
        const projData = await projRes.json();
        const kycData = await kycRes.json();
        const leaveData = await leaveRes.json();
        setSummary([
          { label: "Total Employees", value: empData.total, icon: <FaUsers className="w-7 h-7" /> },
          { label: "Active Projects", value: projData.total, icon: <FaProjectDiagram className="w-7 h-7" /> },
          { label: "Pending KYC", value: kycData.pending, icon: <FaFileAlt className="w-7 h-7" /> },
          { label: "Approved Leaves", value: leaveData.approved, icon: <FaCheckCircle className="w-7 h-7" /> },
        ]);
      } catch {
        setSummary([
          { label: "Total Employees", value: null, icon: <FaUsers className="w-7 h-7" /> },
          { label: "Active Projects", value: null, icon: <FaProjectDiagram className="w-7 h-7" /> },
          { label: "Pending KYC", value: null, icon: <FaFileAlt className="w-7 h-7" /> },
          { label: "Approved Leaves", value: null, icon: <FaCheckCircle className="w-7 h-7" /> },
        ]);
      }
      setLoading(false);
    }
    fetchDashboardData();
  }, []);

  useEffect(() => {
    async function fetchAttendanceTrend() {
      setAttendanceLoading(true);
      try {
        const res = await fetch("https://cafm.zenapi.co.in/api/dashboard/attendance-trend");
        const data = await res.json();
        setAttendanceTrend((data.trend || []) as AttendanceTrendItem[]);
      } catch {
        setAttendanceTrend([] as AttendanceTrendItem[]);
      }
      setAttendanceLoading(false);
    }
    fetchAttendanceTrend();
  }, []);

  // Fetch leave trend
  useEffect(() => {
    async function fetchLeaveTrend() {
      setLeaveLoading(true);
      try {
        const res = await fetch("https://cafm.zenapi.co.in/api/dashboard/leave-trend");
        const data = await res.json();
        setLeaveTrend((data.trend || []) as LeaveTrendItem[]);
      } catch {
        setLeaveTrend([] as LeaveTrendItem[]);
      }
      setLeaveLoading(false);
    }
    fetchLeaveTrend();
  }, []);

  // Fetch project distribution
  useEffect(() => {
    async function fetchProjectDistribution() {
      try {
        const res = await fetch("https://cafm.zenapi.co.in/api/dashboard/project-distribution");
        const data = await res.json();
        setProjectDistribution((data.distribution || []) as ProjectDistributionItem[]);
      } catch {
        setProjectDistribution([] as ProjectDistributionItem[]);
      }
    }
    fetchProjectDistribution();
  }, []);

  // Fetch recent activities
  useEffect(() => {
    async function fetchRecentActivities() {
      setRecentLoading(true);
      try {
        const res = await fetch("https://cafm.zenapi.co.in/api/dashboard/recent-activities");
        const data = await res.json();
        setRecentAttendance((data.recentAttendance || []) as RecentAttendanceItem[]);
        setRecentLeaves((data.recentLeaves || []) as RecentLeaveItem[]);
        setRecentKYC((data.recentKYC || []) as RecentKYCItem[]);
      } catch {
        setRecentAttendance([] as RecentAttendanceItem[]);
        setRecentLeaves([] as RecentLeaveItem[]);
        setRecentKYC([] as RecentKYCItem[]);
      }
      setRecentLoading(false);
    }
    fetchRecentActivities();
  }, []);

  useEffect(() => {
    async function fetchOnLeaveToday() {
      setOnLeaveTodayLoading(true);
      try {
        const [leaveRes, kycRes] = await Promise.all([
          fetch("https://cafm.zenapi.co.in/api/dashboard/on-leave-today"),
          fetch("https://cafm.zenapi.co.in/api/kyc"),
        ]);
        
        const leaveData = await leaveRes.json();
        const kycData = await kycRes.json();
        
        const employees = (kycData.kycForms || []) as KycForm[];
        const employeeNameMap = new Map<string, string>();
        for (const kyc of employees) {
            if (kyc.personalDetails && kyc.personalDetails.employeeId) {
                employeeNameMap.set(kyc.personalDetails.employeeId, kyc.personalDetails.fullName);
            }
        }
        
        const onLeaveData = (leaveData.onLeave || []) as OnLeaveApiResponseItem[];
        
        const enrichedOnLeaveData = onLeaveData.map((leaveItem) => ({
          ...leaveItem,
          name: employeeNameMap.get(leaveItem.employeeId) || 'Unknown',
          date: leaveItem.startDate,
        }));
        
        setOnLeaveToday(enrichedOnLeaveData as OnLeaveTodayItem[]);
      } catch {
        setOnLeaveToday([] as OnLeaveTodayItem[]);
      }
      setOnLeaveTodayLoading(false);
    }
    fetchOnLeaveToday();
  }, []);

  // Pie chart calculations
  const totalProjects = projectDistribution.reduce((sum, p) => sum + p.count, 0);

  // Attendance Trend Bar Chart rendering
  let attendanceTrendBarSVG: React.ReactNode = null;
  if (attendanceTrend && attendanceTrend.length > 0) {
    const svgWidth = Math.max(attendanceTrend.length * 80, 480);
    const svgHeight = 220;
    const barWidth = 40;
    const chartHeight = 150;
    const maxTotal = Math.max(...attendanceTrend.map((d) => d.total || 1), 1);
    attendanceTrendBarSVG = (
      <svg width={svgWidth} height={svgHeight}>
        {/* X axis line */}
        <line x1={40} x2={svgWidth - 40} y1={30 + chartHeight} y2={30 + chartHeight} stroke="#64748b" strokeWidth={1} />
        {/* Bars for attendance trend */}
        {attendanceTrend.map((d, i) => {
          const x = 40 + i * 80;
          // Increase bar height for the first and third bars by 20%
          let barHeight = (d.present / maxTotal) * chartHeight;
          if (i === 0 || i === 2) {
            barHeight *= 1.2;
            // Ensure barHeight does not exceed chartHeight
            barHeight = Math.min(barHeight, chartHeight);
          }
          return (
            <g key={d.date}>
              <rect
                x={x - barWidth / 2}
                y={30 + chartHeight - barHeight}
                width={barWidth}
                height={barHeight}
                fill="#6366f1"
                rx={6}
              />
              {/* Value label above bar */}
              <text
                x={x}
                y={30 + chartHeight - barHeight - 8}
                textAnchor="middle"
                fontSize={"1rem"}
                className={theme === "dark" ? "fill-blue-300" : "fill-blue-700"}
              >
                {d.present}/{d.total}
              </text>
              {/* Date label below bar */}
              <text
                x={x}
                y={30 + chartHeight + 20}
                textAnchor="middle"
                fontSize={"1rem"}
                className={theme === "dark" ? "fill-gray-300" : "fill-gray-700"}
              >
                {d.date ? new Date(d.date).toLocaleDateString(undefined, { month: 'short', day: 'numeric' }) : ''}
              </text>
            </g>
          );
        })}
        {/* Y axis labels */}
        {[0, 0.25, 0.5, 0.75, 1].map((t) => (
          <text
            key={t}
            x={20}
            y={30 + chartHeight - chartHeight * t + 5}
            textAnchor="end"
            fontSize={"0.9rem"}
            className={theme === "dark" ? "fill-gray-400" : "fill-gray-500"}
          >
            {Math.round(maxTotal * t)}
          </text>
        ))}
      </svg>
    );
  }

  // Leave Trend Line Chart rendering
  let leaveTrendLineSVG: React.ReactNode = null;
  if (leaveTrend && leaveTrend.length > 0) {
    const svgWidth = Math.max(leaveTrend.length * 80, 480);
    const svgHeight = 220;
    const chartHeight = 150;
    const maxLeave = Math.max(...leaveTrend.map((l) => l.count), 1);
    leaveTrendLineSVG = (
      <svg width={svgWidth} height={svgHeight}>
        {/* X axis line */}
        <line x1={40} x2={svgWidth - 40} y1={30 + chartHeight} y2={30 + chartHeight} stroke="#64748b" strokeWidth={1} />

        {/* Y axis labels */}
        {[0, 0.25, 0.5, 0.75, 1].map((t) => (
          <text
            key={t}
            x={35}
            y={30 + chartHeight - chartHeight * t + 5}
            textAnchor="end"
            className={`text-xs ${theme === "dark" ? "fill-gray-400" : "fill-gray-500"}`}
          >
            {Math.round(maxLeave * t)}
          </text>
        ))}

        {/* Polyline for leave trend */}
        <polyline
          fill="none"
          strokeWidth={3}
          className={theme === "dark" ? "stroke-indigo-500" : "stroke-indigo-400"}
          points={leaveTrend.map((l, i) => {
            const x = 40 + i * 80;
            const y = 30 + chartHeight - (l.count / maxLeave) * chartHeight;
            return `${x},${y}`;
          }).join(" ")}
        />
        
        {/* Circles and labels for each point */}
        {leaveTrend.map((l, i) => {
          const x = 40 + i * 80;
          const y = 30 + chartHeight - (l.count / maxLeave) * chartHeight;
          const tooltipText = `${new Date(l._id).toLocaleDateString(undefined, { month: 'short', day: 'numeric' })}: ${l.count} leaves`;
          
          return (
            <g key={l._id} className="group">
              <title>{tooltipText}</title>
              {/* Circle for the data point */}
              <circle 
                cx={x} 
                cy={y} 
                r={6} 
                strokeWidth={3}
                className={`transition-all group-hover:r-8 ${theme === "dark" ? "fill-gray-800 stroke-indigo-400" : "fill-white stroke-indigo-500"}`}
              />
              
              {/* Value label that appears on hover */}
            <text
              x={x}
                y={y - 18}
              textAnchor="middle"
                className={`text-sm font-bold opacity-0 group-hover:opacity-100 transition-opacity ${theme === "dark" ? "fill-white" : "fill-black"}`}
            >
              {l.count}
            </text>

              {/* Month label below axis */}
            <text
              x={x}
              y={30 + chartHeight + 20}
              textAnchor="middle"
                className={`text-xs ${theme === "dark" ? "fill-gray-400" : "fill-gray-600"}`}
            >
                {new Date(l._id).toLocaleDateString(undefined, { month: 'short', day: 'numeric' })}
            </text>
            </g>
          );
        })}
      </svg>
    );
  }

  return (
    <div className={`w-full max-w-7xl mx-auto ${sectionPad}`}>
      {/* Header */}
      <div
        className={`rounded-2xl mb-6 p-4 sm:p-6 flex flex-col sm:flex-row items-start sm:items-center gap-4 sm:gap-5 shadow-lg bg-gradient-to-r ${
          theme === "dark"
            ? "from-gray-900 to-gray-800"
            : "from-blue-500 to-blue-800"
        }`}
      >
        <div
          className={`rounded-xl p-3 sm:p-4 flex items-center justify-center ${
            theme === "dark" ? "bg-gray-900 bg-opacity-80" : "bg-blue-600 bg-opacity-30"
          }`}
        >
          <FaChartBar className="w-8 h-8 sm:w-10 sm:h-10 text-white" />
        </div>
        <div>
          <h1 className="text-2xl sm:text-3xl font-bold text-white mb-1">Manager Dashboard</h1>
          <p className="text-white text-sm sm:text-base opacity-90">Overview of employees, projects, and activities.</p>
        </div>
      </div>
      {/* Summary Cards */}
      <div className="grid grid-cols-1 xs:grid-cols-2 md:grid-cols-4 gap-4 sm:gap-6 mb-6">
        {summary.map((item) => (
          <div
            key={item.label}
            className={`rounded-2xl shadow p-4 sm:p-6 flex items-center gap-3 sm:gap-4 border ${
              theme === "dark"
                ? "bg-gray-800 border-blue-900"
                : "bg-white border-blue-100"
            }`}
          >
            <div
              className={`rounded-xl p-2 sm:p-3 flex items-center justify-center ${
                theme === "dark" ? "bg-gray-900" : "bg-blue-100"
              }`}
            >
              {/* Render icon with blue color in light theme, white in dark theme */}
              {item.label === "Total Employees" && <FaUsers className="w-6 h-6 sm:w-7 sm:h-7" color={theme === "dark" ? "#fff" : "#2563eb"} />}
              {item.label === "Active Projects" && <FaProjectDiagram className="w-6 h-6 sm:w-7 sm:h-7" color={theme === "dark" ? "#fff" : "#2563eb"} />}
              {item.label === "Pending KYC" && <FaFileAlt className="w-6 h-6 sm:w-7 sm:h-7" color={theme === "dark" ? "#fff" : "#2563eb"} />}
              {item.label === "Approved Leaves" && <FaCheckCircle className="w-6 h-6 sm:w-7 sm:h-7" color={theme === "dark" ? "#fff" : "#2563eb"} />}
            </div>
            <div>
              <div className={`text-xl sm:text-2xl font-bold ${theme === "dark" ? "text-blue-300" : "text-blue-700"}`}>
                {loading || item.value === null ? <span className="animate-pulse">...</span> : item.value}
              </div>
              <div className={`text-xs sm:text-sm font-medium ${theme === "dark" ? "text-gray-300" : "text-gray-500"}`}>{item.label}</div>
            </div>
          </div>
        ))}
      </div>
      {/* Graphs + Recent Activities */}
      <div className="flex flex-col md:grid md:grid-cols-3 gap-6 sm:gap-8 mb-6">
        {/* Attendance Bar Graph */}
        <div
          className={`rounded-2xl shadow p-4 sm:p-6 border col-span-2 flex flex-col ${
            theme === "dark" ? "bg-gray-800 border-blue-900" : "bg-white border-blue-100"
          }`}
        >
          <div className={`font-bold mb-2 sm:mb-4 ${theme === "dark" ? "text-blue-300" : "text-blue-700"}`}>Attendance Trend (Last 6 Months)</div>
          <div className="overflow-x-auto">
            <div className="relative min-w-max mt-4 sm:mt-8" style={{ width: Math.max(attendanceTrend.length * 80, 320) }}>
              {attendanceLoading ? (
                <div className="w-full text-center animate-pulse">Loading...</div>
              ) : attendanceTrend.length === 0 ? (
                <div className="w-full text-center text-gray-400">No data</div>
              ) : (
                attendanceTrendBarSVG
              )}
            </div>
          </div>
        </div>
        {/* Project Distribution Pie Chart */}
        <div
          className={`rounded-2xl shadow p-4 sm:p-6 border flex flex-col items-center mt-6 md:mt-0 ${
            theme === "dark" ? "bg-gray-800 border-blue-900" : "bg-white border-blue-100"
          }`}
          onMouseEnter={() => setShowLegend(true)}
          onMouseLeave={() => setShowLegend(false)}
        >
          <div className={`font-bold mb-2 sm:mb-4 ${theme === "dark" ? "text-blue-300" : "text-blue-700"}`}>Project Distribution</div>
          <svg width={180} height={180} viewBox="0 0 220 220" className="mb-2 sm:mb-4">
            {(() => {
              const r = 80;
              let acc = 0;
              return projectDistribution.map((p, i) => {
                const start = acc;
                const angle = (p.count / totalProjects) * 360;
                acc += angle;
                const largeArc = angle > 180 ? 1 : 0;
                const x1 = 110 + r * Math.cos((Math.PI * (start - 90)) / 180);
                const y1 = 110 + r * Math.sin((Math.PI * (start - 90)) / 180);
                const x2 = 110 + r * Math.cos((Math.PI * (start + angle - 90)) / 180);
                const y2 = 110 + r * Math.sin((Math.PI * (start + angle - 90)) / 180);
                return (
                  <path
                    key={p._id}
                    d={`M110,110 L${x1},${y1} A${r},${r} 0 ${largeArc} 1 ${x2},${y2} Z`}
                    fill={PIE_COLORS[i % PIE_COLORS.length]}
                    stroke="#fff"
                    strokeWidth={2}
                  />
                );
              });
            })()}
          </svg>
          {(showLegend || window.innerWidth < 768) && (
            <div className="flex flex-wrap gap-2 justify-center">
              {projectDistribution.map((p, i) => (
                <span key={p._id} className="flex items-center gap-2 text-xs sm:text-sm">
                  <span className="w-3 h-3 rounded-full" style={{ background: PIE_COLORS[i % PIE_COLORS.length] }}></span>
                  <span className={theme === "dark" ? "text-gray-200" : "text-gray-700"}>{p._id}</span>
                  <span className={theme === "dark" ? "text-gray-400" : "text-gray-500"}>({p.count})</span>
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
      {/* Leave Trend and Recent Activities in the same row */}
      <div className="flex flex-col md:grid md:grid-cols-2 gap-6 sm:gap-8 mb-6">
        {/* Leave Trend Line Chart (Scrollable) */}
        <div
          className={`rounded-2xl shadow p-4 sm:p-6 border flex flex-col ${
            theme === "dark" ? "bg-gray-800 border-blue-900" : "bg-white border-blue-100"
          }`}
        >
          <div className={`font-bold mb-2 sm:mb-4 ${theme === "dark" ? "text-blue-300" : "text-blue-700"}`}>Leave Trend (Last 6 Months)</div>
          <div className="overflow-x-auto">
            <div className="relative" style={{ minWidth: Math.max(leaveTrend.length * 80, 320) }}>
                {leaveLoading ? (
                    <div className="w-full text-center animate-pulse h-[180px] sm:h-[220px] flex items-center justify-center">Loading...</div>
                ) : leaveTrend.length === 0 ? (
                    <div className="w-full text-center text-gray-400 h-[180px] sm:h-[220px] flex items-center justify-center">No data</div>
                ) : (
                    leaveTrendLineSVG
                )}
            </div>
          </div>
        </div>
        {/* Recent Activities */}
        <div
          className={`rounded-2xl shadow p-4 sm:p-6 border flex flex-col ${
            theme === "dark" ? "bg-gray-800 border-blue-900" : "bg-white border-blue-100"
          }`}
        >
          <div className={`font-bold mb-2 sm:mb-4 ${theme === "dark" ? "text-blue-300" : "text-blue-700"}`}>Recent Activities</div>
          <ul className="space-y-3 sm:space-y-4">
            {recentLoading ? (
              <li className="text-center text-gray-400">Loading...</li>
            ) : (
              <>
                {recentAttendance.slice(0, 3).map((act) => (
                  <li key={act._id} className="flex items-center gap-2 sm:gap-3">
                    <span className={`w-7 h-7 sm:w-8 sm:h-8 flex items-center justify-center rounded-full ${theme === "dark" ? "bg-gray-900" : "bg-blue-50"}`}>
                      <FaBell className="text-blue-500" />
                    </span>
                    <div className="flex-1">
                      <div className={theme === "dark" ? "text-gray-200 text-xs sm:text-sm" : "text-gray-700 text-xs sm:text-sm"}>
                        <b>{act.employeeId}</b> ({act.designation}) punched in at <b>{act.projectName}</b>
                      </div>
                      <div className={theme === "dark" ? "text-xs text-gray-400" : "text-xs text-gray-400"}>{act.punchInTime ? new Date(act.punchInTime).toLocaleTimeString() : ''} on {act.date ? new Date(act.date).toLocaleDateString() : ''}</div>
                    </div>
                  </li>
                ))}
                {recentLeaves.slice(0, 2).map((leave) => (
                  <li key={leave._id} className="flex items-center gap-2 sm:gap-3">
                    <span className={`w-7 h-7 sm:w-8 sm:h-8 flex items-center justify-center rounded-full ${theme === "dark" ? "bg-gray-900" : "bg-green-50"}`}>
                      <FaCheckCircle className="text-green-500" />
                    </span>
                    <div className="flex-1">
                      <div className={theme === "dark" ? "text-gray-200 text-xs sm:text-sm" : "text-gray-700 text-xs sm:text-sm"}>
                        <b>{leave.employeeId}</b> leave ({leave.leaveType}) <b>{leave.status}</b>
                      </div>
                      <div className={theme === "dark" ? "text-xs text-gray-400" : "text-xs text-gray-400"}>{leave.startDate ? new Date(leave.startDate).toLocaleDateString() : ''}</div>
                    </div>
                  </li>
                ))}
                {recentKYC.slice(0, 1).map((kyc) => (
                  <li key={kyc._id} className="flex items-center gap-2 sm:gap-3">
                    <span className={`w-7 h-7 sm:w-8 sm:h-8 flex items-center justify-center rounded-full ${theme === "dark" ? "bg-gray-900" : "bg-yellow-50"}`}>
                      <FaFileAlt className="text-yellow-500" />
                    </span>
                    <div className="flex-1">
                      <div className={theme === "dark" ? "text-gray-200 text-xs sm:text-sm" : "text-gray-700 text-xs sm:text-sm"}>
                        KYC update for <b>{
                          typeof kyc.personalDetails?.employeeId === 'string' || typeof kyc.personalDetails?.employeeId === 'number'
                            ? kyc.personalDetails.employeeId
                            : 'Unknown'
                        }</b>
                      </div>
                    </div>
                  </li>
                ))}
                {recentAttendance.length === 0 && recentLeaves.length === 0 && recentKYC.length === 0 && (
                  <li className="text-center text-gray-400">No recent activities</li>
                )}
              </>
            )}
          </ul>
        </div>
      </div>
      {/* Pending Approvals Table */}
      <div className={`rounded-2xl shadow p-4 sm:p-6 border ${theme === "dark" ? "bg-gray-800 border-blue-900" : "bg-white border-blue-100"}`}>
        <div className={`font-bold mb-2 sm:mb-4 ${theme === "dark" ? "text-blue-300" : "text-blue-700"}`}>Pending Approvals</div>
        <div className="overflow-x-auto">
          <table className="min-w-[520px] w-full divide-y text-xs sm:text-sm">
            <thead className={theme === "dark" ? "bg-blue-900" : "bg-blue-50"}>
              <tr>
                <th className={`px-2 sm:px-4 py-2 sm:py-3 text-left text-[10px] sm:text-xs font-bold uppercase ${theme === "dark" ? "text-blue-200" : "text-blue-700"}`}>Employee ID</th>
                <th className={`px-2 sm:px-4 py-2 sm:py-3 text-left text-[10px] sm:text-xs font-bold uppercase ${theme === "dark" ? "text-blue-200" : "text-blue-700"}`}>Name</th>
                <th className={`px-2 sm:px-4 py-2 sm:py-3 text-left text-[10px] sm:text-xs font-bold uppercase ${theme === "dark" ? "text-blue-200" : "text-blue-700"}`}>Leave Type</th>
                <th className={`px-2 sm:px-4 py-2 sm:py-3 text-left text-[10px] sm:text-xs font-bold uppercase ${theme === "dark" ? "text-blue-200" : "text-blue-700"}`}>Status</th>
                <th className={`px-2 sm:px-4 py-2 sm:py-3 text-left text-[10px] sm:text-xs font-bold uppercase ${theme === "dark" ? "text-blue-200" : "text-blue-700"}`}>Date</th>
              </tr>
            </thead>
            <tbody className={theme === "dark" ? "divide-y divide-blue-900" : "divide-y divide-blue-50"}>
              {onLeaveTodayLoading ? (
                <tr>
                  <td colSpan={5} className={`px-2 sm:px-4 py-8 sm:py-12 text-center ${theme === "dark" ? "text-gray-400" : "text-gray-500"}`}>Loading...</td>
                </tr>
              ) : onLeaveToday.length === 0 ? (
                <tr>
                  <td colSpan={5} className={`px-2 sm:px-4 py-8 sm:py-12 text-center ${theme === "dark" ? "text-gray-400" : "text-gray-500"}`}>No pending approvals</td>
                </tr>
              ) : (
                onLeaveToday.map((item) => (
                  <tr key={item._id} className={theme === "dark" ? "hover:bg-blue-900 transition" : "hover:bg-blue-50 transition"}>
                    <td className={`px-2 sm:px-4 py-2 sm:py-3 font-bold ${theme === "dark" ? "text-blue-200" : "text-blue-800"}`}>{item.employeeId}</td>
                    <td className="px-2 sm:px-4 py-2 sm:py-3">{item.name || '-'}</td>
                    <td className="px-2 sm:px-4 py-2 sm:py-3">{item.leaveType || '-'}</td>
                    <td className="px-2 sm:px-4 py-2 sm:py-3">
                      <span className={`inline-flex items-center px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium ${theme === "dark" ? "bg-yellow-900 text-yellow-200" : "bg-yellow-100 text-yellow-800"}`}>{item.status || '-'}</span>
                    </td>
                    <td className="px-2 sm:px-4 py-2 sm:py-3">{item.date ? new Date(item.date).toLocaleDateString() : '-'}</td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}